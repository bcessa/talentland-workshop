// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             buf-v1.51.0
// source: sample/v1/service_api.proto

package samplev1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ServiceAPI_Ping_FullMethodName   = "/sample.v1.ServiceAPI/Ping"
	ServiceAPI_Ready_FullMethodName  = "/sample.v1.ServiceAPI/Ready"
	ServiceAPI_Echo_FullMethodName   = "/sample.v1.ServiceAPI/Echo"
	ServiceAPI_Faulty_FullMethodName = "/sample.v1.ServiceAPI/Faulty"
	ServiceAPI_Slow_FullMethodName   = "/sample.v1.ServiceAPI/Slow"
)

// ServiceAPIClient is the client API for ServiceAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Sample server RPC interface.
type ServiceAPIClient interface {
	// Reachability probe.
	Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PingResponse, error)
	// Readiness probe.
	Ready(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ReadyResponse, error)
	// Process an incoming echo request.
	Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error)
	// Returns an error roughly about 50% of the time.
	Faulty(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DummyResponse, error)
	// Exhibit a random latency between 10 and 200ms.
	Slow(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DummyResponse, error)
}

type serviceAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceAPIClient(cc grpc.ClientConnInterface) ServiceAPIClient {
	return &serviceAPIClient{cc}
}

func (c *serviceAPIClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, ServiceAPI_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceAPIClient) Ready(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ReadyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadyResponse)
	err := c.cc.Invoke(ctx, ServiceAPI_Ready_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceAPIClient) Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EchoResponse)
	err := c.cc.Invoke(ctx, ServiceAPI_Echo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceAPIClient) Faulty(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DummyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DummyResponse)
	err := c.cc.Invoke(ctx, ServiceAPI_Faulty_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceAPIClient) Slow(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DummyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DummyResponse)
	err := c.cc.Invoke(ctx, ServiceAPI_Slow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceAPIServer is the server API for ServiceAPI service.
// All implementations must embed UnimplementedServiceAPIServer
// for forward compatibility.
//
// Sample server RPC interface.
type ServiceAPIServer interface {
	// Reachability probe.
	Ping(context.Context, *emptypb.Empty) (*PingResponse, error)
	// Readiness probe.
	Ready(context.Context, *emptypb.Empty) (*ReadyResponse, error)
	// Process an incoming echo request.
	Echo(context.Context, *EchoRequest) (*EchoResponse, error)
	// Returns an error roughly about 50% of the time.
	Faulty(context.Context, *emptypb.Empty) (*DummyResponse, error)
	// Exhibit a random latency between 10 and 200ms.
	Slow(context.Context, *emptypb.Empty) (*DummyResponse, error)
	mustEmbedUnimplementedServiceAPIServer()
}

// UnimplementedServiceAPIServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedServiceAPIServer struct{}

func (UnimplementedServiceAPIServer) Ping(context.Context, *emptypb.Empty) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedServiceAPIServer) Ready(context.Context, *emptypb.Empty) (*ReadyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ready not implemented")
}
func (UnimplementedServiceAPIServer) Echo(context.Context, *EchoRequest) (*EchoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (UnimplementedServiceAPIServer) Faulty(context.Context, *emptypb.Empty) (*DummyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Faulty not implemented")
}
func (UnimplementedServiceAPIServer) Slow(context.Context, *emptypb.Empty) (*DummyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Slow not implemented")
}
func (UnimplementedServiceAPIServer) mustEmbedUnimplementedServiceAPIServer() {}
func (UnimplementedServiceAPIServer) testEmbeddedByValue()                    {}

// UnsafeServiceAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceAPIServer will
// result in compilation errors.
type UnsafeServiceAPIServer interface {
	mustEmbedUnimplementedServiceAPIServer()
}

func RegisterServiceAPIServer(s grpc.ServiceRegistrar, srv ServiceAPIServer) {
	// If the following call pancis, it indicates UnimplementedServiceAPIServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ServiceAPI_ServiceDesc, srv)
}

func _ServiceAPI_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAPIServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceAPI_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAPIServer).Ping(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceAPI_Ready_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAPIServer).Ready(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceAPI_Ready_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAPIServer).Ready(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceAPI_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAPIServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceAPI_Echo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAPIServer).Echo(ctx, req.(*EchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceAPI_Faulty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAPIServer).Faulty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceAPI_Faulty_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAPIServer).Faulty(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceAPI_Slow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAPIServer).Slow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceAPI_Slow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAPIServer).Slow(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceAPI_ServiceDesc is the grpc.ServiceDesc for ServiceAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sample.v1.ServiceAPI",
	HandlerType: (*ServiceAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _ServiceAPI_Ping_Handler,
		},
		{
			MethodName: "Ready",
			Handler:    _ServiceAPI_Ready_Handler,
		},
		{
			MethodName: "Echo",
			Handler:    _ServiceAPI_Echo_Handler,
		},
		{
			MethodName: "Faulty",
			Handler:    _ServiceAPI_Faulty_Handler,
		},
		{
			MethodName: "Slow",
			Handler:    _ServiceAPI_Slow_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sample/v1/service_api.proto",
}
