syntax = "proto3";

package sample.v1;

import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "buf/validate/validate.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

// OpenAPI settings.
// https://buf.build/grpc-ecosystem/grpc-gateway/file/main:protoc-gen-openapiv2/options/annotations.proto
// https://buf.build/grpc-ecosystem/grpc-gateway/docs/main:grpc.gateway.protoc_gen_openapiv2.options
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  swagger: "2.0";
  host: "localhost:9090";
  schemes: HTTP;
  schemes: HTTPS;
  schemes: WSS;
  consumes: "application/json";
  consumes: "application/protobuf";
  produces: "application/json";
  produces: "application/protobuf";
  info: {
    title: "Sample service";
    version: "0.1.0";
    contact: {
      name: "John Doe";
      email: "john.doe@example.com";
    };
  };
  security_definitions: {
    security: {
      key: "bearer"
      value: {
        type: TYPE_API_KEY
        in: IN_HEADER
        name: "Authorization"
        description: "Authentication token provided as: 'Bearer {token}'"
      }
    }
  }
  security: {
    security_requirement: {
      key: "bearer"
    }
  }
};

// Sample server RPC interface.
service ServiceAPI {
  // Reachability probe.
  rpc Ping (google.protobuf.Empty) returns (PingResponse) {
    option (google.api.http) = {
      get: "/v1/ping"
    };
  }
  // Readiness probe.
  rpc Ready (google.protobuf.Empty) returns (ReadyResponse) {
    option (google.api.http) = {
      get: "/v1/ready"
    };
  }
  // Process an incoming echo request.
  rpc Echo (EchoRequest) returns (EchoResponse) {
    option (google.api.http) = {
      post: "/v1/echo/request"
      body: "*"
    };
  }
  // Returns an error roughly about 50% of the time.
  rpc Faulty (google.protobuf.Empty) returns (DummyResponse) {
    option (google.api.http) = {
      post: "/v1/echo/faulty"
    };
  }
  // Exhibit a random latency between 10 and 200ms.
  rpc Slow (google.protobuf.Empty) returns (DummyResponse) {
    option (google.api.http) = {
      post: "/v1/echo/slow"
    };
  }
}

// Sample reachability response.
message PingResponse {
  // Generic reachability test, should never return "false".
  bool ok = 1 [(buf.validate.field).bool.const = true];
}

// Sample readiness response.
message ReadyResponse {
  // Returns "true" if the service is ready to receive and handle
  // requests.
  bool ok = 1;
}

// Sample request for the "echo" service.
message EchoRequest {
  // Payload submitted to the "echo" request.
  string value = 1 [(buf.validate.field).string.min_len = 3];
}

// The response generated by the "echo" server.
message EchoResponse {
  // Result generated by the server.
  string result = 1;
}

// Custom error type returned by the `Faulty` RPC method.
message FaultyError {
  // RPC error code. MUST be a valid code value registered in the
  // google.golang.org/grpc/codes package.
  uint32 code = 1;

  // General description of the error.
  string desc = 2;

  // Custom key/value pairs providing additional details about the error.
  map<string, string> metadata = 3;
}

// Sample response structure.
message DummyResponse {
  // Generic status check, set to 'false' in case of errors.
  bool ok = 1;
}
